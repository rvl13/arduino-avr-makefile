
PROJECT_NAME := blink_mega2560



# Types of builds taken care separately.
# DBG = Debug
# PRD = Prod (Release)

# Different Directories
SRC_DIR 		:= ./src

DBG_OBJ_DIR 	:= ./debug/obj
PRD_OBJ_DIR 	:= ./prod/obj

DBG_ASM_DIR		:= ./debug/asm
PRD_ASM_DIR		:= ./prod/asm

DBG_DASM_DIR	:= ./debug/dasm
PRD_DASM_DIR	:= ./prod/dasm

RUNTIME_DIR		:= ../ARL

INC_DIR_1		:= ${RUNTIME_DIR}/src/cores/arduino
INC_DIR_2		:= ${RUNTIME_DIR}/src/variants/mega

INC_DIRS 		:= ${INC_DIR_1} ${INC_DIR_2}
INC_DIRS_ARG	:= ${addprefix -I, ${INC_DIRS}}


# The Arduino Runtime Library Archives
DBG_ARL := ${RUNTIME_DIR}/debug/obj/ARL.a
PRD_ARL := ${RUNTIME_DIR}/prod/obj/ARL.a




# The Toolchain binaries
GCC := D:/SW_11/avr-gcc-12.1.0-x64-windows/bin/avr-gcc.exe
GPP := D:/SW_11/avr-gcc-12.1.0-x64-windows/bin/avr-g++.exe
OBJDMP := D:/SW_11/avr-gcc-12.1.0-x64-windows/bin/avr-objdump.exe
OBJCPY := D:/SW_11/avr-gcc-12.1.0-x64-windows/bin/avr-objcopy.exe
AR := D:/SW_11/avr-gcc-12.1.0-x64-windows/bin/avr-gcc-ar.exe
QEMU := D:/SW_3/qemu_install/qemu/qemu-system-avr.exe
GDB := D:/SW_11/avr-gcc-12.1.0-x64-windows/bin/avr-gdb.exe
AVRDUD := D:/SW_11/avrdude-v7.1-windows-x64/avrdude.exe



# MCU specific settings
MCU := atmega2560
F_CPU := 16000000UL




# Compilation Flags
# Optimizations disabled and debug info preserved
#DBG_CFLAGS := -c -g -O0 -MMD -DF_CPU=${F_CPU} -mmcu=${MCU} ${INC_DIRS_ARG}
# Optimizations enabled and debug info preserved
DBG_CFLAGS := -c -g -Os -MMD -DF_CPU=${F_CPU} -mmcu=${MCU} ${INC_DIRS_ARG}
DBG_SFLAGS := -c -g -x assembler-with-cpp -MMD -DF_CPU=${F_CPU} -mmcu=${MCU} ${INC_DIRS_ARG}

# Optimizations enabled and debug info not preserved
PRD_CFLAGS := -c -Os -MMD -DF_CPU=${F_CPU} -mmcu=${MCU} ${INC_DIRS_ARG}
PRD_SFLAGS := -c -x assembler-with-cpp -MMD -DF_CPU=${F_CPU} -mmcu=${MCU} ${INC_DIRS_ARG}

# Linker Flags
DBG_LDFLAGS := -mmcu=${MCU}
PRD_LDFLAGS := -mmcu=${MCU}



# Notation
# DIR = Dircetory
# FNM = FileName
# EXT = Extention

# Src Files
SRC_FNM := blink_arduino	#name only, no extension


# C Source Files and respective Object Files
SRC_DIR_FNM_EXT_C := $(wildcard $(SRC_DIR)/*.c)
DBG_OBJ_DIR_FNM_EXT_C := $(patsubst $(SRC_DIR)/%.c,$(DBG_OBJ_DIR)/%.c.o,$(SRC_DIR_FNM_EXT_C))
PRD_OBJ_DIR_FNM_EXT_C := $(patsubst $(SRC_DIR)/%.c,$(PRD_OBJ_DIR)/%.c.o,$(SRC_DIR_FNM_EXT_C))



# CPP Source Files and respective Object Files
SRC_DIR_FNM_EXT_CPP := $(wildcard $(SRC_DIR)/*.cpp)
DBG_OBJ_DIR_FNM_EXT_CPP := $(patsubst $(SRC_DIR)/%.cpp,$(DBG_OBJ_DIR)/%.cpp.o,$(SRC_DIR_FNM_EXT_CPP))
PRD_OBJ_DIR_FNM_EXT_CPP := $(patsubst $(SRC_DIR)/%.cpp,$(PRD_OBJ_DIR)/%.cpp.o,$(SRC_DIR_FNM_EXT_CPP))



# Assembly Source Files and respective Object Files
SRC_DIR_FNM_EXT_S := $(wildcard $(SRC_DIR)/*.S)
DBG_OBJ_DIR_FNM_EXT_S := $(patsubst $(SRC_DIR)/%.S,$(DBG_OBJ_DIR)/%.S.o,$(SRC_DIR_FNM_EXT_S))
PRD_OBJ_DIR_FNM_EXT_S := $(patsubst $(SRC_DIR)/%.S,$(PRD_OBJ_DIR)/%.S.o,$(SRC_DIR_FNM_EXT_S))



# All Object Files
DBG_OBJ_DIR_FNM_EXT_ALL := ${DBG_OBJ_DIR_FNM_EXT_C} ${DBG_OBJ_DIR_FNM_EXT_CPP} ${DBG_OBJ_DIR_FNM_EXT_S}
PRD_OBJ_DIR_FNM_EXT_ALL := ${PRD_OBJ_DIR_FNM_EXT_C} ${PRD_OBJ_DIR_FNM_EXT_CPP} ${PRD_OBJ_DIR_FNM_EXT_S}



# Executable Elf
DBG_EXE_FNM := ${PROJECT_NAME}
DBG_EXE_FNM_EXT := ${addsuffix .elf, ${DBG_EXE_FNM}}
DBG_EXE_DIR_FNM_EXT := ${addprefix ${DBG_OBJ_DIR}/, ${DBG_EXE_FNM_EXT}}

PRD_EXE_FNM := ${PROJECT_NAME}
PRD_EXE_FNM_EXT := ${addsuffix .elf, ${PRD_EXE_FNM}}
PRD_EXE_DIR_FNM_EXT := ${addprefix ${PRD_OBJ_DIR}/, ${PRD_EXE_FNM_EXT}}



# Binary (here Hex)
DBG_BIN_FNM := ${DBG_EXE_FNM}
DBG_BIN_FNM_EXT := ${addsuffix .hex, ${DBG_BIN_FNM}}
DBG_BIN_DIR_FNM_EXT := ${addprefix ${DBG_OBJ_DIR}/, ${DBG_BIN_FNM_EXT}}

PRD_BIN_FNM := ${PRD_EXE_FNM}
PRD_BIN_FNM_EXT := ${addsuffix .hex, ${PRD_BIN_FNM}}
PRD_BIN_DIR_FNM_EXT := ${addprefix ${PRD_OBJ_DIR}/, ${PRD_BIN_FNM_EXT}}



# Assembler output files
DBG_ASM_FNM_EXT := ${addsuffix .s, ${SRC_FNM}}
DBG_ASM_DIR_FNM_EXT := ${addprefix ${DBG_ASM_DIR}/, ${DBG_ASM_FNM_EXT}}
PRD_ASM_FNM_EXT := ${addsuffix .s, ${SRC_FNM}}
PRD_ASM_DIR_FNM_EXT := ${addprefix ${PRD_ASM_DIR}/, ${PRD_ASM_FNM_EXT}}



# Disassembly files
DBG_DASM_FNM_EXT := ${addsuffix .asm, ${SRC_FNM}}
DBG_DASM_DIR_FNM_EXT := ${addprefix ${DBG_DASM_DIR}/, ${DBG_DASM_FNM_EXT}} ${addsuffix .asm, ${DBG_DASM_DIR}/${DBG_EXE_FNM}}
DBG_DASM_I_FNM_EXT := ${addsuffix _i.asm, ${SRC_FNM}}
DBG_DASM_I_DIR_FNM_EXT := ${addprefix ${DBG_DASM_DIR}/, ${DBG_DASM_I_FNM_EXT}} ${addsuffix _i.asm, ${DBG_DASM_DIR}/${DBG_EXE_FNM}}

# BTW, interactive disassembly doesn't make any sense for prod (release) build
PRD_DASM_FNM_EXT := ${addsuffix .asm, ${SRC_FNM}}
PRD_DASM_DIR_FNM_EXT := ${addprefix ${PRD_DASM_DIR}/, ${PRD_DASM_FNM_EXT}} ${addsuffix .asm, ${PRD_DASM_DIR}/${PRD_EXE_FNM}}
PRD_DASM_I_FNM_EXT := ${addsuffix _i.asm, ${SRC_FNM}}
PRD_DASM_I_DIR_FNM_EXT := ${addprefix ${PRD_DASM_DIR}/, ${PRD_DASM_I_FNM_EXT}} ${addsuffix _i.asm, ${PRD_DASM_DIR}/${PRD_EXE_FNM}}




# Files to Clean
CLN_FNM_EXT := *.o *.elf *.bin *.ali *.asm *.s *.S *.map *.hex *.d
DBG_CLN_OBJ_DIR_FNM_EXT := ${addprefix ${DBG_OBJ_DIR}/, ${CLN_FNM_EXT}}
DBG_CLN_ASM_DIR_FNM_EXT := ${DBG_ASM_DIR}/*.s
DBG_CLN_DASM_DIR_FNM_EXT := ${DBG_DASM_DIR}/*.asm

PRD_CLN_OBJ_DIR_FNM_EXT := ${addprefix ${PRD_OBJ_DIR}/, ${CLN_FNM_EXT}}
PRD_CLN_ASM_DIR_FNM_EXT := ${PRD_ASM_DIR}/*.s
PRD_CLN_DASM_DIR_FNM_EXT := ${PRD_DASM_DIR}/*.asm







# Recipe Bin (here Hex)
bin_dbg : ${DBG_BIN_DIR_FNM_EXT}

bin_prd : ${PRD_BIN_DIR_FNM_EXT}







# Recipe all
all_dbg : compile_dbg link_dbg

all_prd : compile_prd link_prd





# Recipe disasm
disasm_dbg : ${DBG_DASM_DIR_FNM_EXT} ${DBG_DASM_I_DIR_FNM_EXT}

disasm_prd : ${PRD_DASM_DIR_FNM_EXT} ${PRD_DASM_I_DIR_FNM_EXT}


# TO DO Recipe asmble
asmble_dbg : ${DBG_ASM_DIR_FNM_EXT}

asmble_prd : ${PRD_ASM_DIR_FNM_EXT}




# Recipe Compile
compile_dbg : ${DBG_OBJ_DIR_FNM_EXT_ALL}

# compile C files
${DBG_OBJ_DIR}/%.c.o: ${SRC_DIR}/%.c
	$(GCC) $(DBG_CFLAGS) -o $@ $^

# compile C++ files
${DBG_OBJ_DIR}/%.cpp.o: ${SRC_DIR}/%.cpp
	$(GPP) $(DBG_CFLAGS) -o $@ $^

# compile Assembly files
${DBG_OBJ_DIR}/%.S.o: ${SRC_DIR}/%.S
	$(GCC) $(DBG_SFLAGS) -o $@ $^




compile_prd : ${PRD_OBJ_DIR_FNM_EXT_ALL}

# compile C files
${PRD_OBJ_DIR}/%.c.o: ${SRC_DIR}/%.c
	$(GCC) $(PRD_CFLAGS) -o $@ $^

# compile C++ files
${PRD_OBJ_DIR}/%.cpp.o: ${SRC_DIR}/%.cpp
	$(GPP) $(PRD_CFLAGS) -o $@ $^

# compile Assembly files
${PRD_OBJ_DIR}/%.S.o: ${SRC_DIR}/%.S
	$(GCC) $(PRD_SFLAGS) -o $@ $^






# Recipe Link
link_dbg : ${DBG_EXE_DIR_FNM_EXT}

${DBG_EXE_DIR_FNM_EXT}: ${DBG_OBJ_DIR_FNM_EXT_ALL}
	$(GCC) $(DBG_LDFLAGS) -Wl,-Map=$@.map -o $@ $^ ${DBG_ARL}



link_prd : ${PRD_EXE_DIR_FNM_EXT}

${PRD_EXE_DIR_FNM_EXT}: ${PRD_OBJ_DIR_FNM_EXT_ALL}
	$(GCC) $(PRD_LDFLAGS) -Wl,-Map=$@.map -o $@ $^ ${PRD_ARL}






# Bin (Hex) Full Recipe
${DBG_BIN_DIR_FNM_EXT}:
	$(OBJCPY) -O ihex -R .eeprom ${DBG_EXE_DIR_FNM_EXT} $@

${PRD_BIN_DIR_FNM_EXT}:
	$(OBJCPY) -O ihex -R .eeprom ${PRD_EXE_DIR_FNM_EXT} $@






# Assemble Only Full Recipe
${DBG_ASM_DIR}/%.s: ${SRC_DIR}/%.c
	$(GCC) $(DBG_SFLAGS) -o $@ $^

${DBG_ASM_DIR}/%.s: ${SRC_DIR}/%.cpp
	$(GPP) $(DBG_SFLAGS) -o $@ $^



${PRD_ASM_DIR}/%.s: ${SRC_DIR}/%.c
	$(GCC) $(PRD_SFLAGS) -o $@ $^

${PRD_ASM_DIR}/%.s: ${SRC_DIR}/%.cpp
	$(GPP) $(PRD_SFLAGS) -o $@ $^







# Disassemble Full Recipe
${DBG_DASM_DIR}/%_i.asm: ${DBG_OBJ_DIR}/%.o
	$(OBJDMP) -S $^ > $@

${DBG_DASM_DIR}/%_i.asm: ${DBG_OBJ_DIR}/%.elf
	$(OBJDMP) -S $^ > $@

${DBG_DASM_DIR}/%.asm: ${DBG_OBJ_DIR}/%.o
	$(OBJDMP) -D $^ > $@

${DBG_DASM_DIR}/%.asm: ${DBG_OBJ_DIR}/%.elf
	$(OBJDMP) -D $^ > $@



${PRD_DASM_DIR}/%_i.asm: ${PRD_OBJ_DIR}/%.o
	$(OBJDMP) -S $^ > $@

${PRD_DASM_DIR}/%_i.asm: ${PRD_OBJ_DIR}/%.elf
	$(OBJDMP) -S $^ > $@

${PRD_DASM_DIR}/%.asm: ${PRD_OBJ_DIR}/%.o
	$(OBJDMP) -D $^ > $@

${PRD_DASM_DIR}/%.asm: ${PRD_OBJ_DIR}/%.elf
	$(OBJDMP) -D $^ > $@








# print the header of elf
header_dbg : ${DBG_EXE_DIR_FNM_EXT}
	$(OBJDMP) -h $^

header_prd : ${DBG_EXE_DIR_FNM_EXT}
	$(OBJDMP) -h $^









# clean the obj files
clean_dbg :
	rm -rf ${DBG_CLN_OBJ_DIR_FNM_EXT} ${DBG_CLN_DASM_DIR_FNM_EXT} ${DBG_CLN_ASM_DIR_FNM_EXT}

clean_prd :
	rm -rf ${PRD_CLN_OBJ_DIR_FNM_EXT} ${PRD_CLN_DASM_DIR_FNM_EXT} ${PRD_CLN_ASM_DIR_FNM_EXT}







# call like > make load_dbg PORT=COM7
load_dbg :
	${AVRDUD} -D -c wiring -p ${MCU} -P ${PORT} -b 115200 -U flash:w:${DBG_BIN_DIR_FNM_EXT}

load_prd :
	${AVRDUD} -D -c wiring -p ${MCU} -P ${PORT} -b 115200 -U flash:w:${PRD_BIN_DIR_FNM_EXT}



